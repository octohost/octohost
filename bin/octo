#!/bin/bash

if [ -f /etc/default/octohost ]; then
  . /etc/default/octohost
fi

get_short_container_id ()
{
  sudo docker ps | grep "$BUILD_ORG_NAME/$1:latest" | cut -d ' ' -f 1
}

get_long_container_id ()
{
  sudo docker inspect $1 | jq '.[0].ID' | cut -d '"' -f 2
}

reformat_bytes ()
{
  (( size = $1/1024/1024 ))
  echo "$size"
}

show_break ()
{
  echo ""
  echo ""
  echo "################################"
}

start_logspout ()
{
  if [ -z "$LOGSPOUT_TARGET" ]; then
    echo "No LOGSPOUT_TARGET in /etc/default/octohost - not starting."
    exit
  fi
  if [ -e "/var/run/docker.sock" ]; then
    $LOGSPOUT
  else
    sudo service docker start
    sleep 5
    $LOGSPOUT
  fi
}

stop_logspout ()
{
  sudo docker ps | grep "$LOGSPOUT_IMAGE" | awk '{ print $1 }' | xargs sudo docker kill
}

pull_logspout ()
{
  sudo docker pull $LOGSPOUT_IMAGE
}

start_logs ()
{
  check_syslog_port
  if [ -e "/var/run/docker.sock" ]; then
    LOG_COMMAND="sudo docker run -d -v=$1:$2 $REMOTE_SYSLOG_COMMAND $2"
    $LOG_COMMAND
  else
    sudo service docker start
    sleep 5
    $LOG_COMMAND
  fi
}

stop_octologs ()
{
  sudo docker ps | grep "$OCTOLOGS_IMAGE" | awk '{ print $1 }' | xargs sudo docker kill
}

check_syslog_port ()
{
  if [ -z "$REMOTE_SYSLOG_PORT" ]; then
    echo "Need to define REMOTE_SYSLOG_PORT in /etc/default/octohost"
    exit 1
  fi
}

get_exposed_port ()
{
  INTERNAL_PORT=$(grep -i "^EXPOSE" $DOCKERFILE | cut -d ' ' -f 2)
  echo $INTERNAL_PORT
}

get_external_port()
{
  PORT=$(sudo docker port $ID $INTERNAL_PORT | sed 's/0.0.0.0://')
  echo $PORT
}

inspect_to_get_external_port()
{
  PORT=$(sudo docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}}{{(index $conf 0).HostPort}} {{end}}' $ID)
  echo $PORT
}

inspect_to_get_container_name()
{
  for tag in $(sudo docker inspect -f '{{json .Config.Env}}' $ID | jq '.[]' ); do
  if echo $tag | grep -q "CONTAINER_NAME"
  then
    CONTAINER_NAME=$(echo $tag | cut -d '"' -f 2 | cut -d '=' -f 2-10)
  fi
  done
  echo $CONTAINER_NAME
}

launch_container_return_id ()
{
  ID=$(echo "$RUN_OPTIONS $BUILD_ORG_NAME/$BASE" | xargs sudo docker run)
  echo $ID
}

set_src_variables ()
{
  BASE="$1"
  REPOSITORY="$BASE.git"
  REPO_PATH="$SRC_DIR/$REPOSITORY"
  DOCKERFILE="$REPO_PATH/Dockerfile"
}

get_unique_domains ()
{
  SCRATCH=`mktemp`
  DOMAINS="$1"

  for domain in ${DOMAINS//,/ } ; do
    echo $domain
  done | sort | uniq > $SCRATCH

  FINAL_DOMAINS=""

  for line in $( cat $SCRATCH ); do
    FINAL_DOMAINS="$FINAL_DOMAINS,$line"
  done

  rm -f $SCRATCH

  echo $FINAL_DOMAINS | cut -d ',' -f 2-100
}

case "$1" in

  logs)
  if [ "$2" == "octostart" ]; then
    check_syslog_port
    $OCTOLOGS
  elif [ "$2" == "octostop" ]; then
    stop_octologs
  elif [ "$2" == "start" ]; then
    if [[ $3 && $4 ]]; then
      check_syslog_port
      start_logs "$3" "$4"
    else
      echo "Usage: octo logs start {full-log-path} {mount}"
    fi
  else
    echo "Usage: octo logs {octostart|start [full-log-path] [mount]}"
  fi
  ;;

  logspout)
  if [ "$2" == "start" ]; then
    check_syslog_port
    start_logspout
  elif [ "$2" == "stop" ]; then
    stop_logspout
  elif [ "$2" == "pull" ]; then
    pull_logspout
  else
    echo "Usage: octo logspout {start|stop|pull}"
  fi
  ;;

  start)
  if [ $2 ]; then
    set_src_variables "$2"
    NUMBER=${3:-1}
    for (( i=1; i <= $NUMBER; i++ ))
    do
      if [ -e "$DOCKERFILE" ]; then
        RUN_OPTIONS=$(/usr/bin/octo config:options "$BASE" "$DOCKERFILE")
      else
        RUN_OPTIONS="-P -d -e CONTAINER_NAME=$BASE"
        ENV=$(/usr/bin/octo config:env $BASE)
        RUN_OPTIONS="$RUN_OPTIONS $ENV"
      fi
      ID=$(launch_container_return_id)
      PORT=$(inspect_to_get_external_port)
      TAGS=$(/usr/bin/octo service:tags $ID)
      /usr/bin/octo service:set $BASE $PORT $TAGS
      /usr/bin/octo config:proxy
    done
  else
    echo "Usage: octo start {container}"
  fi
  ;;

  stop)
  if [ $2 ]; then
    BASE="$2"
    if [ $3 ]; then
      IMAGE_ID="$3"
      CONTAINERS=$(sudo docker ps | grep "$IMAGE_ID" | cut -d ' ' -f 1)
    else
      CONTAINERS=$(sudo docker ps | grep "$BASE:latest" | cut -d ' ' -f 1)
    fi
    for container in $CONTAINERS
    do
      ID="$container"
      PORT=$(inspect_to_get_external_port)
      sudo docker kill "$ID" > /dev/null
      octo service:rm "$BASE" "$PORT"
      /usr/bin/octo config:proxy
    done
  else
    echo "Usage: octo stop {container}"
  fi
  ;;

  config:set)
  if [[ $2 && "$3" ]]; then
    /usr/bin/consulkv set $2 "$3"
  else
    echo "Usage: octo config:set {container/key} {var}"
  fi
  ;;

  config:get)
  if [ $2 ]; then
    /usr/bin/consulkv get $2
  else
    echo "Usage: octo config:get {container/key}"
  fi
  ;;

  config:rm)
  if [ $2 ]; then
    /usr/bin/consulkv del $2
  else
    echo "Usage: octo config:rm {container/key}"
  fi
  ;;

  config:export)
  for key in `/usr/bin/consulkv ls`
  do
    if [ "$key" != "null" ]
    then
      VALUE=$(octo config:get $key)
      echo "octo config:set $key '$VALUE'"
    fi
  done
  ;;

  config)
  if [ $2 ]; then
    for conf in `/usr/bin/consulkv ls $2`;
    do
      echo -n "/$2/$conf:";
      /usr/bin/octo config:get $2/$conf
    done
  else
    echo "Usage: octo config {container}"
  fi
  ;;

  config:env)
  if [ $2 ]; then
    ENV=""
    while read conf
    do
      KEY=$(echo $conf | cut -d '/' -f 3 | cut -d ':' -f 1)
      VAR=$(echo $conf | cut -d ':' -f 2-10)
      ENV="$ENV -e $KEY=\"$VAR\""
    done < <(/usr/bin/octo config $2)
    echo "$ENV"
  else
    echo "octo config:env {container}"
  fi
  ;;

  config:options)
  if [[ $2 && $3 ]]; then
    BASE="$2"
    DOCKERFILE="$3"
    RUN_OPTIONS=" -d -e CONTAINER_NAME=$BASE"

    ADD_NAME=$(grep -i "^# ADD_NAME" $DOCKERFILE)
    if [ -n "$ADD_NAME" ]
    then
      RUN_OPTIONS="$RUN_OPTIONS -name $BASE"
    fi

    VOLUMES_FROM=$(grep -i "^# VOLUMES_FROM" $DOCKERFILE)
    if [ -n "$VOLUMES_FROM" ]
    then
      VOLUME_NAME="${BASE}_data"
      RUN_OPTIONS="$RUN_OPTIONS -volumes-from $VOLUME_NAME"
    fi

    while read -r MOUNT_FROM_HOST ; do
    if [ -n "$MOUNT_FROM_HOST" ]
    then
      HOST_PATH=$(echo $MOUNT_FROM_HOST | awk '{ print $3 }')
      CONTAINER_PATH=$(echo $MOUNT_FROM_HOST | awk '{ print $4 }')
      if [ -n "$CONTAINER_PATH" ]
      then
        MOUNT_PATH="$HOST_PATH:$CONTAINER_PATH"
      else
        MOUNT_PATH="$HOST_PATH:$HOST_PATH"
      fi

      RUN_OPTIONS=" -v $MOUNT_PATH $RUN_OPTIONS"
    fi
    done < <(grep -i '^# MOUNT_FROM_HOST' $DOCKERFILE )


    while read -r PORTS_FROM_HOST ; do
    if [ -n "$PORTS_FROM_HOST" ]
    then
      HOST_PORT=$(echo $PORTS_FROM_HOST | awk '{ print $3 }')
      CONTAINER_PORT=$(echo $PORTS_FROM_HOST | awk '{ print $4 }')
      NEW_PORT="0.0.0.0:$HOST_PORT:$CONTAINER_PORT"
      PORT_OPTIONS=" -p $NEW_PORT $PORT_OPTIONS"
    fi
    done < <(grep -i '^# PORTS_FROM_HOST' $DOCKERFILE )
    if [ -n "$PORT_OPTIONS" ]
    then
      RUN_OPTIONS=" $PORT_OPTIONS $RUN_OPTIONS"
    else
      RUN_OPTIONS=" -P $RUN_OPTIONS"
    fi 

    while read -r ASSIGNED_DOMAIN ; do
    if [ -n "$ASSIGNED_DOMAIN" ]
    then
      DOMAIN_TO_ASSIGN=$(echo $ASSIGNED_DOMAIN | awk '{ print $3 }')
      if [ -n "$DOMAINS_TO_ASSIGN_LIST" ]
      then
        DOMAINS_TO_ASSIGN_LIST="$DOMAIN_TO_ASSIGN,$DOMAINS_TO_ASSIGN_LIST"
      else
        DOMAINS_TO_ASSIGN_LIST="$DOMAIN_TO_ASSIGN"
      fi
    fi
    done < <(grep -i '^# ASSIGNED_DOMAIN' $DOCKERFILE )
    if [ -n "$DOMAINS_TO_ASSIGN_LIST" ]
    then
      echo '$DOMAINLIST' >> /tmp/debugdomain
      echo $DOMAINS_TO_ASSIGN_LIST >> /tmp/debugdomain
      /usr/bin/octo domains:set "$BASE" "$DOMAINS_TO_ASSIGN_LIST"
    fi 

    FOUND_LINKS=$(grep -i "^# LINK_SERVICE" $DOCKERFILE)
    if [ -n "$FOUND_LINKS" ]; then
      while read LINK_LINE
      do
        SOURCE=$(echo $LINK_LINE | awk '{ print $3 }')
        LINK_NAME=$(echo $LINK_LINE | awk '{ print $4 }')
        if [ -n "$LINK_NAME" ]
        then
          LINK_NAME="$LINK_NAME:$SOURCE"
        else
          LINK_NAME="${BASE}_${SOURCE}:${SOURCE}"
        fi  
        RUN_OPTIONS="$RUN_OPTIONS --link $LINK_NAME"
      done <<<"$FOUND_LINKS"
    fi

    
    ENV_VARS=$(/usr/bin/octo config $BASE | grep -v "Error: 100: Key not found")
    if [ -n "$ENV_VARS" ]
    then
      ENV=$(/usr/bin/octo config:env $BASE)
      RUN_OPTIONS="$RUN_OPTIONS $ENV"
    fi
    echo "$RUN_OPTIONS"
  else
    echo "Something went wrong."
  fi
  ;;

  service:set)
  if [[ $2 && $3 ]]; then
    CONTAINER="$2"
    PORT="$3"
    TAGS=${4:-http}
    if echo $TAGS | grep -q 'http'
    then
      CHECK=",\"check\": {\"script\": \"curl -s http://$PRIVATE_IP:$PORT\",\"interval\": \"60s\"}"
    else
      CHECK=""
    fi
    PAYLOAD="{\"ID\": \"$CONTAINER-$PORT\",\"Name\": \"$CONTAINER\",\"Port\": $PORT,\"Tags\": [\"$TAGS\"]$CHECK}"
    /usr/bin/consulkv service:set "$PAYLOAD"
  else
    echo "Usage: octo service:set {container} {port} {tags}"
  fi
  ;;

  service:rm)
  if [[ $2 && $3 ]]; then
    CONTAINER="$2"
    PORT="$3"
    /usr/bin/consulkv service:del "$CONTAINER-$PORT"
  else
    echo "Usage: octo service:rm {container} {port}"
  fi
  ;;

  service:tags)
  if [ $2 ]; then
    for tag in $(sudo docker inspect -f '{{json .Config.Env}}' $2 | jq '.[]' ); do
      if echo $tag | grep -q "CONSUL_TAGS"
      then
        TAG=$(echo $tag | cut -d '"' -f 2 | cut -d '=' -f 2-10)
      fi
    done
    echo $TAG
  fi
  ;;

  services)
  /usr/bin/consulkv services
  ;;

  services:catalog)
  /usr/bin/consulkv services:catalog
  ;;

  services:register)
  for container in $(sudo docker ps | grep $BUILD_ORG_NAME | awk '{ print $1 }'); do
    ID=$container
    PORT=$(inspect_to_get_external_port)
    BASE=$(inspect_to_get_container_name)
    TAGS=$(/usr/bin/octo service:tags $ID)
    if [[ $BASE && $PORT ]]
    then
      /usr/bin/octo service:set $BASE $PORT $TAGS
    fi
  done
  ;;

  services:clear)
  for container in $(sudo docker ps -q ); do
    ID=$container
    PORT=$(inspect_to_get_external_port)
    BASE=$(inspect_to_get_container_name)
    if [[ $BASE && $PORT ]]
    then
      /usr/bin/octo service:rm $BASE $PORT
    fi
  done
  # Remove HTTP tagged orphans from crashed containers.
  for service in $(/usr/bin/octo services); do
    if echo $service | grep -q 'http'
    then
      ID=$(echo $service | jq .ID | cut -d '"' -f 2)
      PORT=$(echo $ID | grep -o [0-9]*$)
      BASE=${ID%-$PORT}
      /usr/bin/octo service:rm $BASE $PORT
    fi
  done
  ;;

  domains:set)
  if [[ $2 && $3 ]]; then
    DOMAINS=$(get_unique_domains $3)
    /usr/bin/consulkv set $2/DOMAINS $DOMAINS
  else
    echo "Usage: octo domains:set {container} {domains}"
    echo "Domains are comma separated."
  fi
  ;;

  domains:get)
  if [ $2 ]; then
    /usr/bin/consulkv get $2/DOMAINS
  else
    echo "Usage: octo domains:get {container}"
  fi
  ;;

  config:proxy)
  sudo octoconfig update
  ;;

  status)
  cd $SRC_DIR
  for i in *.git; do
    site=`basename $i .git`
    echo -n "$site: "
    if (/usr/bin/consulkv service:health $site | grep -q "passing"); then
      echo -e "\e[32mOK\e[0m"
    else
      echo -e "\e[31mDOWN\e[0m"
    fi
  done
  ;;

  clean)
  echo "Cleaning old exited containers."
  # TODO: Errors if there's no containers - annoying.
  sudo docker ps -a | grep -v "$BUILD_ORG_NAME\/.*\_data*" | grep "Exit" | cut -d ' ' -f 1 | xargs sudo docker rm
  echo "Showing all remaining containers."
  sudo docker ps -a
  echo "Cleaning out all unused images."
  sudo docker images | grep "\<none\>" | awk '{ print $3 }' | xargs sudo docker rmi
  echo "Showing all remaining images."
  sudo docker images
  ;;

  remove)
  if [ $2 ]; then
    BASE="$2"
    if [ -d /home/git/$BASE.git ]; then
      sudo rm -rf /home/git/$BASE.git
    else
      echo "There is no source with that name."
      exit
    fi
    if [ -d $SRC_DIR/$BASE.git ]; then sudo rm -rf $SRC_DIR/$BASE.git; fi
    echo "Removed the source for $BASE."
    OLD_ID=$(sudo docker ps | grep "$BASE:latest" | cut -d ' ' -f 1)
    if [ $OLD_ID ]; then
      ID=$OLD_ID
      PORT=$(inspect_to_get_external_port)
      octo service:rm $BASE $PORT
      sudo docker kill $OLD_ID
      echo "Removed running container."
      /usr/bin/octo config:proxy
    fi

  else
    echo "Usage: octo remove {container}"
  fi
  ;;

  move:sites)
  if [ $2 ]; then
    # Grab all of the sites.
    sudo /usr/bin/rsync -avz ubuntu@$2:/home/git/*.git /home/git/
    cd /home/git
    for i in *.git; do
      site=`basename $i .git`
      /usr/bin/octo restart $site
      # Need a checkout and not a bare repo to build with later.
      sudo git clone /home/git/$site.git $SRC_DIR/$site.git
    done
    sudo chown -R git.git $SRC_DIR
  else
    echo "Usage: octo move:sites {ip-address}'"
  fi
  ;;

  move:config)
  if [ $2 ]; then
    ssh `whoami`@$2 "octo config:export" | bash
    echo "## Done moving the config from $2. ##"
    octo config:export
  else
    echo "Usage: octo move:config {ip-address}"
  fi
  ;;

  move:redis)
  if [[ $2 && $3 ]]; then
    WHOAMI=`whoami`
    ssh -f -N -L 9999:127.0.01:$3 $WHOAMI@$2
    python /usr/local/bin/redis-copy.py -s 127.0.0.1:9999 -t 127.0.0.1:$3 -d 0 --clean
    python /usr/local/bin/redis-copy.py -s 127.0.0.1:9999 -t 127.0.0.1:$3 -d 0
    ps auwx | grep "$WHOAMI@$2" | awk '{ print $2 }' | xargs kill
  else
    echo "Usage: octo move:redis {ip-address} {port}"
  fi
  ;;

  restart)
  if [ $2 ]; then
    show_break
    echo "Restarting $2."
    newrev=`cd /home/git/$2.git; git log . | head -1 | cut -d ' ' -f 2`
    branch=`cd /home/git/$2.git; git branch | grep "*" | cut -d ' ' -f 2`
    cd /home/git/$2.git; sudo git archive $newrev | /home/git/receiver "$2" "$newrev" "git" "NOTHING HERE" "$branch"
    sudo rm -rf $SRC_DIR/$2
  else
    echo "Usage: octo restart {container}"
  fi
  ;;

  reload)
  if [ $2 ]; then
    /usr/bin/octo stop $2
    /usr/bin/octo start $2
  else
    echo "Usage: octo reload {container}"
  fi
  ;;

  push)
  if [ $2 ]; then
    BASE="$2"
    if [ -n "$PRIVATE_REGISTRY" ]; then
      sudo docker tag $BUILD_ORG_NAME/$BASE $PRIVATE_REGISTRY/$BASE
      sudo docker push $PRIVATE_REGISTRY/$BASE
    else
      echo "This feature requires a private registry."
    fi
  else
    echo "Usage: octo push {container}"
  fi
  ;;

  pull)
  if [ $2 ]; then
    BASE="$2"
    if [ -n "$PRIVATE_REGISTRY" ]; then
      sudo docker pull $PRIVATE_REGISTRY/$BASE
      sudo docker tag $PRIVATE_REGISTRY/$BASE $BUILD_ORG_NAME/$BASE
    else
      echo "This feature requires a private registry."
    fi
  else
    echo "Usage: octo pull {container}"
  fi
  ;;

  update)
  echo "Updating your /usr/bin/octo from $OCTO_BIN"
  cd /usr/bin/ && rm -f octo && wget -q $OCTO_BIN && chmod 755 octo
  ;;

  help|-h|--help)
  echo "Usage: octo status|clean|restart|reload|remove|move|config|logspout|logs|update"
  cat<<EOF

  octo status                              Show basic app status: OK or DOWN.
  octo clean                               Remove unused and stopped containers.
  octo start {image}                       Start a {container} from an already built image.
  octo stop {container}                    Stop all {containers} that match.
  octo restart {container}                 Rebuild and restart {container} from src stored in $SRC_DIR.
  octo reload {container}                  Reload {container} without a rebuild.
  octo remove {container}                  Remove {container}, the src and the service entry.

  octo move:sites {ip-address}             Move sites from targeted octohost, rebuilding all containers from src.
  octo move:config {ip-address}            Move config from targeted octohost.
  octo move:redis {ip-address} {port}      Move all keys from Redis from {ip-address}:{port} to 127.0.0.1:{port}

  octo push {image}                        Tag and push {image} to a private registry.
  octo pull {image}                        Pull and re-tag {image} from a private registry.

  octo config {container}                  Show all ENV variables for {container}.
  octo config:set {container/key} {var}    Set an ENV variable for {container}.
  octo config:get {container/key}          Get an ENV variable for {container}.
  octo config:rm {container/key}           Remove an ENV variable for {container}.
  octo config:export                       Get all config variables for all containers.
  octo config:proxy                        Update the proxy configuration from Consul data.

  octo domains:set {container} {domains}   Put list of comma separated domains into Consul for a {container}
  octo domains:get {container}             Get list of domains from Consul for a {container}

  octo service:set {container} {port}      Add service to Consul.
  octo service:rm {container} {port}       Remove a service from Consul.
  octo service:tags {container}            Get service tags from CONSUL_TAGS ENV in a container.

  octo services                            List all services that the local Consul agent knows about.
  octo services:catalog                    List all services that the Consul cluster knows about.
  octo services:clear                      Remove all services from Consul.
  octo services:register                   Register all running containers with Consul.

  octo logspout {pull|start|stop}          Pull/start/stop progrium/logspout image.

  octo logs octostart                      Use remote_syslog to send Docker and nginx logs to remote syslog.
  octo logs octostop                       Stop sending Docker and nginx logs to remote syslog.
  octo logs start {full-log-path} {mount}  Use remote_syslog to send {full-log-path} to remote syslog.

  octo update                              Update octo command from $OCTO_BIN.
EOF
  for script in $(ls -d /usr/local/octohost/plugins/*/commands); do
    $script "$@"
  done
  ;;

  *)
  for script in $(ls -d /usr/local/octohost/plugins/*/commands); do
    $script "$@"
  done
  ;;
esac
